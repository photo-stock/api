name: Build and deploy backend

on:
  push:
    branches: ['main']

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Build and push API Docker images
        id: push_api_image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/photo-stock-api:latest -f Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/photo-stock-api:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/photo-stock-api-nginx:latest -f nginx/Dockerfile ./nginx
          docker push ${{ secrets.DOCKER_USERNAME }}/photo-stock-api-nginx:latest

      - name: Set up SSH for remote Docker Compose
        uses: amirmarmul/docker-context-ssh-action@v1
        with:
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-username: ${{ secrets.SSH_USERNAME }}
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}



      - name: Deploy Backend with Docker Compose
        if: steps.push_api_image.conclusion == 'success'
        env:
          APP_ENV: production
          APP_DEBUG: true
          APP_KEY: ${{ env.APP_KEY }}
          DB_CONNECTION: mysql
          DB_HOST: mysql
          DB_PORT: 3306
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Deploying backend..."
           docker context use remote

          # Stop and remove all containers
          docker compose down --remove-orphans

          # Remove unused images and volumes to ensure freshness
          docker image prune -f
          docker volume prune -f

          # Pull the latest images
          docker compose pull

          # Build and start the containers
          docker compose up -d --build

          echo "Setting permissions for storage and cache..."
          docker compose exec laravel_app bash -c "chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache"
          docker compose exec laravel_app bash -c "chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache"


    #  - name: Generate Laravel APP_KEY
    #    id: generate_app_key
    #    run: |
    #      APP_KEY=$(docker compose exec laravel_app php artisan key:generate --show)

